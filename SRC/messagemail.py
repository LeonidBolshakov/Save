from logging import LogRecord, Formatter, FileHandler, StreamHandler
import time
from datetime import datetime
import sys
import os
import logging

from yagmailhandler import YaGmailHandler

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MONTHS_RU = [
    "",
    "—è–Ω–≤–∞—Ä—è",
    "—Ñ–µ–≤—Ä–∞–ª—è",
    "–º–∞—Ä—Ç–∞",
    "–∞–ø—Ä–µ–ª—è",
    "–º–∞—è",
    "–∏—é–Ω—è",
    "–∏—é–ª—è",
    "–∞–≤–≥—É—Å—Ç–∞",
    "—Å–µ–Ω—Ç—è–±—Ä—è",
    "–æ–∫—Ç—è–±—Ä—è",
    "–Ω–æ—è–±—Ä—è",
    "–¥–µ–∫–∞–±—Ä—è",
]
DEFAULT_LOG_FILE = "application.log"
MAX_RETRY_ATTEMPTS = 3
RETRY_DELAY = 5


class MessageMail:
    def __init__(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ email –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        sender = os.getenv("SENDER_EMAIL", "")
        password = os.getenv("SENDER_PASSWORD", "")
        recipient = os.getenv("RECIPIENT_EMAIL", "")

        self.email_handler = YaGmailHandler(sender, password, recipient)

    def compose_and_send_email(self, record: LogRecord, max_level: int) -> None:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç e-mail"""

        subject, content = self._compose_message_content(record, max_level)
        if not self._send_email_with_retry(subject, content):
            error_msg = "–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å"
            logging.error(error_msg)
            raise RuntimeError(error_msg)
        logging.info("–°–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ e-mail")

    def _compose_message_content(
        self, record: LogRecord, max_level: int
    ) -> tuple[str, str]:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–º—É –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ email"""
        level_name = logging.getLevelName(max_level)

        # noinspection PyUnreachableCode
        match max_level:
            case logging.DEBUG | logging.INFO:
                return self._create_info_email(record)
            case logging.WARNING:
                return self._create_warning_email(record)
            case _:
                return self._create_error_email(record, level_name)

    def _create_info_email(self, record: LogRecord) -> tuple[str, str]:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç email –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        archive_path = self._extract_archive_path(record.getMessage())
        subject = "‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"
        content = (
            f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ:\n\n "
            f"–ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ –æ–±–ª–∞–∫–æ.\n"
            f"–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {archive_path}\n\n"
            f"–í—Ä–µ–º—è: {self._format_timestamp(record.created)}"
        )
        return subject, content

    def _create_warning_email(self, record: LogRecord) -> tuple[str, str]:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç email –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
        archive_path = self._extract_archive_path(record.getMessage())
        subject = "üî• –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏"
        content = (
            f"üî• –°–æ–æ–±—â–µ–Ω–∏–µ:\n\n–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏.\n"
            f"–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {archive_path}\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ LOG —Ñ–∞–π–ª: {self._get_log_path()}\n\n"
            f"–í—Ä–µ–º—è: {self._format_timestamp(record.created)}"
        )
        return subject, content

    def _create_error_email(
        self, record: LogRecord, level_name: str
    ) -> tuple[str, str]:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç email –¥–ª—è –æ—à–∏–±–æ–∫"""
        subject = "üö® –ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
        content = (
            f"üö® –°–æ–æ–±—â–µ–Ω–∏–µ:\n\n–ê—Ä—Ö–∏–≤–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å.\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–∫–∏: {level_name}\n"
            f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ LOG —Ñ–∞–π–ª–µ: {self._get_log_path()}\n\n"
            f"–í—Ä–µ–º—è: {self._format_timestamp(record.created)}"
        )
        return subject, content

    @staticmethod
    def _extract_archive_path(message: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—É—Ç—å –∫ –∞—Ä—Ö–∏–≤—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if "remote_path=" in message:
            return message.split("remote_path=")[1]
        return ""

    @staticmethod
    def _format_timestamp(timestamp: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –≤ —Ä—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"""
        dt = datetime.fromtimestamp(timestamp)
        return f"{dt.day} {MONTHS_RU[dt.month]} {dt.year} –≥–æ–¥–∞ {dt:%H:%M}"

    @staticmethod
    def _get_log_path() -> str | None:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞"""
        for handler in logging.getLogger().handlers:
            if isinstance(handler, FileHandler):
                return handler.baseFilename
        return None

    def _send_email_with_retry(self, subject: str, content: str) -> bool:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(1, MAX_RETRY_ATTEMPTS + 1):
            if self.email_handler.send_email(subject, content):
                return True
            if attempt < MAX_RETRY_ATTEMPTS:
                time.sleep(RETRY_DELAY)
        return False


def setup_logging(log_file: str = DEFAULT_LOG_FILE):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    formatter = Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")

    console_handler = StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)

    file_handler = FileHandler(log_file, encoding="utf-8")
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(formatter)

    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)

    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)

    root_logger.addHandler(console_handler)
    root_logger.addHandler(file_handler)


def get_email_credentials() -> tuple[str, str, str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ email –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    sender = os.getenv("SENDER_EMAIL", "")
    password = os.getenv("SENDER_PASSWORD", "")
    recipient = os.getenv("RECIPIENT_EMAIL", "")

    if not sender or not password:
        logging.critical("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ email")
        sys.exit(1)

    return sender, password, recipient


def configure_email_logging() -> None:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç email –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    # !!! logger.addHandler(MaxLevelHandler())
    logger.info("Email –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")


def run_test_scenarios() -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    try:
        1 / 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {e}", exc_info=True)
    logger.warning("–†–µ—Å—É—Ä—Å—ã –Ω–∞ –∏—Å—Ö–æ–¥–µ")
    logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è!")
    logger.info("–ö–æ–º–∞–Ω–¥–∞ *Stop* - –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞")


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        setup_logging()
        configure_email_logging()
        run_test_scenarios()
    except Exception as e:
        logging.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)


if __name__ == "__main__":
    main()
