import logging
import time
from datetime import datetime
import sys
import os
import dotenv
from logging import LogRecord, Formatter, FileHandler, StreamHandler

import yagmail


class YagmailEmailHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ email —Å –ø–æ–º–æ—â—å—é yagmail"""

    def __init__(self, sender_email: str, sender_password: str, recipient_email: str):
        if not sender_email or not sender_password or not recipient_email:
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã")

        self.sender_email = sender_email
        self.sender_password = sender_password
        self.recipient_email = recipient_email

    def send_email(self, subject: str, content: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ yagmail —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            # –î–ª—è –Ø–Ω–¥–µ–∫—Å-–ü–æ—á—Ç—ã
            yag = yagmail.SMTP(
                user=self.sender_email,
                password=self.sender_password,
                host="smtp.yandex.ru",
                port=465,
                smtp_ssl=True,
            )
            yag.send(to=self.recipient_email, subject=subject, contents=content)
            return True
        except yagmail.error.YagAddressError:
            logging.error("–û—à–∏–±–∫–∞ –≤ email –∞–¥—Ä–µ—Å–µ")
            return False
        except yagmail.error.YagInvalidEmailAddress:
            logging.error("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π email –∞–¥—Ä–µ—Å")
            return False
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {str(e)}")
            return False


class MaxLevelEmailHandler(logging.Handler):
    """
    –ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞
    """

    def __init__(self, email_handler: YagmailEmailHandler):
        """
        :param email_handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ email
        """
        super().__init__()
        self.highest_level = 0
        self.email_handler = email_handler
        self.permanent_lock = False

    def emit(self, record: LogRecord):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∞"""
        if self.permanent_lock:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if "*Stop*" in record.getMessage():
            self.permanent_lock = True
            self.send_archive_report(record)
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º
            if self.highest_level < record.levelno:
                self.highest_level = record.levelno

    def send_archive_report(self, record: LogRecord):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º"""
        subject, content = self._compose_email_content(self.highest_level, record)
        if not self._send_with_retry(subject, content):
            logging.error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")

        self.highest_level = 0  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è

    def _compose_email_content(
        self, highest_level: int, record: logging.LogRecord
    ) -> tuple[str, str]:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–º—É –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ email –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∞"""
        # noinspection PyUnreachableCode
        match highest_level:
            case logging.DEBUG | logging.INFO:
                return self.text_mail_info(record)
            case logging.WARNING:
                return self.text_mail_info(record)
            case _:
                return self.text_mail_error_critical(
                    record, logging.getLevelName(highest_level)
                )

    def text_mail_info(self, record: LogRecord) -> tuple[str, str]:
        subject = (
            f"‚úÖ –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ"
        )
        message = record.getMessage()
        archive_path = ""
        if message.index("remote_path="):
            archive_path = message[
                message.index("remote_path=") + len("remote_path=") :
            ]
        content = (
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: \n\n"
            f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞—Ä—Ö–∏–≤ –í–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω –∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ –æ–±–ª–∞–∫–æ.\n"
            f"–û–Ω —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤ –æ–±–ª–∞–∫–µ –ø–æ –∞–¥—Ä–µ—Å—É: {archive_path}\n"
            f"–í—Ä–µ–º—è: {self.format_timestamp_russian(record.created)}"
        )
        return subject, content

    def text_mail_warning(self, record: LogRecord) -> tuple[str, str]:
        subject = f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±–ª–∞–∫–æ"
        message = record.getMessage()
        archive_path = ""
        if message.index("remote_path="):
            archive_path = message[
                message.index("remote_path=") + len("remote_path=") :
            ]
        content = (
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: \n\n"
            f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞—Ä—Ö–∏–≤ –í–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω –∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ –æ–±–ª–∞–∫–æ.\n"
            f"–û–Ω —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤ –æ–±–ª–∞–∫–µ –ø–æ –∞–¥—Ä–µ—Å—É: {archive_path}\n"
            f"–û–¥–Ω–∞–∫–æ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ LOG —Ñ–∞–π–ª–µ {self._get_log_path()}"
            f"–í—Ä–µ–º—è: {self.format_timestamp_russian(record.created)}"
        )
        return subject, content

    def text_mail_error_critical(
        self, record: LogRecord, level_name: str
    ) -> tuple[str, str]:
        subject = "üö® –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö - –ü—Ä–æ–±–ª–µ–º—ã"
        content = (
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –∏ –∑–∞–ø–∏—Å—å –∞—Ä—Ö–∏–≤–∞ –≤ –æ–±–ª–∞–∫–æ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å.\n\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–∫–∏: {level_name} ({record.levelno})\n"
            f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ LOG —Ñ–∞–π–ª–µ: {self._get_log_path()}\n"
            f"–í—Ä–µ–º—è: {self.format_timestamp_russian(record.created)}"
        )

        return subject, content

    @staticmethod
    def _get_log_path() -> str | None:
        root_logger = logging.getLogger()
        for handler in root_logger.handlers:
            if isinstance(handler, logging.FileHandler):
                return handler.baseFilename
        return None

    def _send_with_retry(
        self, subject: str, content: str, max_attempts: int = 3
    ) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É email —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        attempts = 0
        while attempts < max_attempts:
            try:
                error_msg = ""
                if self.email_handler.send_email(subject, content):
                    return True
            except Exception as e:
                error_msg = str(e)
            logging.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email (–ø–æ–ø—ã—Ç–∫–∞ {attempts + 1}): {error_msg}",
                exc_info=True,
            )

            attempts += 1
            if attempts < max_attempts:
                time.sleep(5)

        return False

    @staticmethod
    def format_timestamp_russian(timestamp: float) -> str:
        MONTHS_RU = [
            "",
            "—è–Ω–≤–∞—Ä—è",
            "—Ñ–µ–≤—Ä–∞–ª—è",
            "–º–∞—Ä—Ç–∞",
            "–∞–ø—Ä–µ–ª—è",
            "–º–∞—è",
            "–∏—é–Ω—è",
            "–∏—é–ª—è",
            "–∞–≤–≥—É—Å—Ç–∞",
            "—Å–µ–Ω—Ç—è–±—Ä—è",
            "–æ–∫—Ç—è–±—Ä—è",
            "–Ω–æ—è–±—Ä—è",
            "–¥–µ–∫–∞–±—Ä—è",
        ]

        dt = datetime.fromtimestamp(timestamp)
        day = dt.day
        month = MONTHS_RU[dt.month]
        year = dt.year
        time_str = dt.strftime("%H:%M")
        return f"{day} {month} {year} –≥–æ–¥–∞ {time_str}"


def setup_logging(log_file: str = "application.log"):
    """–Ø–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∑–∞–ø–∏—Å—å—é –≤ —Ñ–∞–π–ª"""
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    formatter = Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")

    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (stdout)
    console_handler = StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)

    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    file_handler = FileHandler(log_file, encoding="utf-8")
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(formatter)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    root_logger.addHandler(console_handler)
    root_logger.addHandler(file_handler)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    return root_logger


def get_email_details():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è email"""
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

    dotenv.load_dotenv()
    sender_email = os.getenv("SENDER_EMAIL", "")
    sender_password = os.getenv("SENDER_PASSWORD", "")
    recipient_email = os.getenv("RECIPIENT_EMAIL", "")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not sender_email or not sender_password:
        logging.critical("Email —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        logging.critical("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        logging.critical("SENDER_EMAIL –∏ SENDER_PASSWORD")
        sys.exit(1)

    return sender_email, sender_password, recipient_email


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_logging()
        app_logger = logging.getLogger("app")
        app_logger.info("–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è email
        sender_email, sender_password, recipient_email = get_email_details()
        app_logger.info(f"–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ email –ø–æ–ª—É—á–µ–Ω—ã. –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient_email}")

        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        email_handler = YagmailEmailHandler(
            sender_email, sender_password, recipient_email
        )

        email_log_handler = MaxLevelEmailHandler(email_handler)
        email_log_handler.setLevel(logging.DEBUG)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ª–æ–≥–≥–µ—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app_logger.addHandler(email_log_handler)
        app_logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ª–æ–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        # 4. –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        app_logger.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")

        # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
            1 / 0
        except Exception as e:
            app_logger.error("–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: %s", str(e), exc_info=True)

        app_logger.warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ä–µ—Å—É—Ä—Å—ã –Ω–∞ –∏—Å—Ö–æ–¥–µ")
        app_logger.critical("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø: —Å–∏—Å—Ç–µ–º–∞ –Ω–∞ –≥—Ä–∞–Ω–∏ —Å–±–æ—è!")

        # –¢—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        app_logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É *Stop* - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º email")

    except Exception as e:
        logging.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: {str(e)}", exc_info=True)
        sys.exit(1)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    main()
